// <auto-generated />
using System;
using HealthClaim.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthClaim.DAL.Migrations
{
    [DbContext(typeof(HealthClaimDbContext))]
    [Migration("20231017083826_alterttableforAddnewTableEmpClaimOrocessDetaisl")]
    partial class alterttableforAddnewTableEmpClaimOrocessDetaisl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HealthClaim.DAL.Models.AdvanceUploadClarificationforType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AdvanceUploadTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Clarification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceUploadTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AdvanceUploadClarificationforTypes");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<long>("EmpId")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.ClaimStatusCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ClaimTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.ToTable("ClaimStatusCategory");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.ClaimType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ClaimTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(6822),
                            Description = "Advance",
                            IsActive = true,
                            Name = "Advance"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(6833),
                            Description = "AdvanceClaim",
                            IsActive = true,
                            Name = "Advance Claim"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(6835),
                            Description = "DirectClaim",
                            IsActive = true,
                            Name = "Direct Claim"
                        });
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.DoctorReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AddmisionAdviseComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Comment_1")
                        .HasColumnType("bit");

                    b.Property<bool?>("Comment_2")
                        .HasColumnType("bit");

                    b.Property<bool?>("Comment_3")
                        .HasColumnType("bit");

                    b.Property<bool?>("Comment_4")
                        .HasColumnType("bit");

                    b.Property<bool?>("Comment_5")
                        .HasColumnType("bit");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeSummaryComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestigationReportComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialDisease")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DoctorReviews");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpAccountDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmpId")
                        .HasColumnType("bigint");

                    b.Property<string>("IfscCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmpId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpAccountDetails");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpAdvance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("AdvanceAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("AdvanceRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ApprovedAmount")
                        .HasColumnType("float");

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("bigint");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("Claim_TypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EmplId")
                        .HasColumnType("bigint");

                    b.Property<double>("EstimatedAmount")
                        .HasColumnType("float");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalRegNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("PayTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestSubmittedById")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ClaimId");

                    b.HasIndex("Claim_TypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmplId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestSubmittedById");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpAdvances");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double?>("ClaimAmount")
                        .HasColumnType("float");

                    b.Property<double?>("ClaimApprovedAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ClaimApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClaimRequetsDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("HospitalTotalBill")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpecailDisease")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmployeeClaims");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimBill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("ConsultationBill")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmpClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmpId")
                        .HasColumnType("bigint");

                    b.Property<double>("HospitalCompleteBill")
                        .HasColumnType("float");

                    b.Property<double>("InvestigationBill")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("MedicineBill")
                        .HasColumnType("float");

                    b.Property<double>("OthersBill")
                        .HasColumnType("float");

                    b.Property<double>("RoomRentBill")
                        .HasColumnType("float");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmpClaimId");

                    b.HasIndex("EmpId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmployeeClaimBills");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimNotInMailBill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BillType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmpClaimBillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmpClaimBillId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpClaimNotInMailBills");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimProcessDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClaimTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("EmpClaimProcessDetails");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClaimTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpClaimStatus");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpFamily", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EmpId")
                        .HasColumnType("bigint");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RelationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmpId");

                    b.HasIndex("RelationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpFamilys");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpFamilyITR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("AnnualIncome")
                        .HasColumnType("float");

                    b.Property<long>("CountingYear")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpFamilyITRs");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpFamilyPAN", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PanNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpFamilyPANs");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateofBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JoiningDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeavingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ApplicabelDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EmpId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmpLavel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkingAbbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgPrimaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgUnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostAssignedInOrgUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostAssignedInWrapperName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReportingOfficerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WrapperName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmpId");

                    b.HasIndex("ReportingOfficerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmpProfiles");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmpRelations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7089),
                            Description = "Father",
                            IsActive = true,
                            Name = "Father"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7101),
                            Description = "Mother",
                            IsActive = true,
                            Name = "Mother"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7102),
                            Description = "Son",
                            IsActive = true,
                            Name = "Son"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7103),
                            Description = "Daughter",
                            IsActive = true,
                            Name = "Daughter"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7104),
                            Description = "Husband",
                            IsActive = true,
                            Name = "Husband"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7105),
                            Description = "Spouse",
                            IsActive = true,
                            Name = "Spouse"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7123),
                            Description = "Self",
                            IsActive = true,
                            Name = "Self"
                        });
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.HospitalAccountDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmpAdvanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("IfscCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmpAdvanceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("HospitalAccountDetails");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.OrgClaimLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("ApplicableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApplicableYear")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lavel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrgClaimLimits");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.UploadDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AdvanceUploadTypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PathUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceUploadTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UploadDocuments");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.UploadTypeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClaimTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UploadTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UploadTypeId");

                    b.ToTable("UploadTypeDetails");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.UplodDocType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UplodDocType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7174),
                            Description = "Medicine",
                            IsActive = true,
                            IsBillable = true,
                            Name = "Medicine"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7176),
                            Description = "Medicine not in Final bill",
                            IsActive = true,
                            IsBillable = true,
                            Name = "Medicine not in Final bill"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7177),
                            Description = "Consultation",
                            IsActive = true,
                            IsBillable = true,
                            Name = "Consultation"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7178),
                            Description = "Room Rent",
                            IsActive = true,
                            IsBillable = true,
                            Name = "Room Rent"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7179),
                            Description = "Investigation",
                            IsActive = true,
                            IsBillable = true,
                            Name = "Investigation"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7180),
                            Description = "Other",
                            IsActive = true,
                            IsBillable = true,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7181),
                            Description = "ConsultationNotFinalBill",
                            IsActive = true,
                            IsBillable = true,
                            Name = "ConsultationNotFinalBill"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7182),
                            Description = "InvestigationNotFinalBill",
                            IsActive = true,
                            IsBillable = true,
                            Name = "InvestigationNotFinalBill"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7183),
                            Description = "OtherBillNotFinalBill",
                            IsActive = true,
                            IsBillable = true,
                            Name = "OtherBillNotFinalBill"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7184),
                            Description = "AdmissionAdviceUpload",
                            IsActive = true,
                            IsBillable = true,
                            Name = "AdmissionAdviceUpload"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7185),
                            Description = "DischargeSummary",
                            IsActive = true,
                            IsBillable = true,
                            Name = "DischargeSummary"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7186),
                            Description = "InvestigationReports",
                            IsActive = true,
                            IsBillable = true,
                            Name = "InvestigationReports"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7187),
                            Description = "FinalHospitalBill",
                            IsActive = true,
                            IsBillable = true,
                            Name = "FinalHospitalBill"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(2023, 10, 17, 14, 8, 26, 310, DateTimeKind.Local).AddTicks(7188),
                            Description = "Diagnosis",
                            IsActive = true,
                            IsBillable = true,
                            Name = "Diagnosis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.AdvanceUploadClarificationforType", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.UploadTypeDetail", "AdvanceUploadTypeDetail")
                        .WithMany()
                        .HasForeignKey("AdvanceUploadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeRecipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeSender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("AdvanceUploadTypeDetail");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeRecipient");

                    b.Navigation("EmployeeSender");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.ApplicationUser", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.ClaimStatusCategory", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.ClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimType");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.DoctorReview", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.EmpClaim", "EmpClaim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmpClaim");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpAccountDetail", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpAdvance", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeApproveBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("HealthClaim.DAL.Models.EmpClaim", "EmpClaim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.ClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("Claim_TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmplId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.EmpFamily", "EmpFamily")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeRequestSubmited")
                        .WithMany()
                        .HasForeignKey("RequestSubmittedById")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("ClaimType");

                    b.Navigation("EmpClaim");

                    b.Navigation("EmpFamily");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeApproveBy");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeRequestSubmited");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaim", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimBill", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.EmpClaim", "EmpClaim")
                        .WithMany()
                        .HasForeignKey("EmpClaimId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.ClaimStatusCategory", "ClaimStatusCategory")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("ClaimStatusCategory");

                    b.Navigation("EmpClaim");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimNotInMailBill", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.EmpClaimBill", "EmpClaimBill")
                        .WithMany()
                        .HasForeignKey("EmpClaimBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmpClaimBill");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimProcessDetails", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.EmpClaim", "EmpClaim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.ClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeRecipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeSender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .IsRequired();

                    b.Navigation("ClaimType");

                    b.Navigation("EmpClaim");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeRecipient");

                    b.Navigation("EmployeeSender");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpClaimStatus", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.EmpClaim", "EmpClaim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.ClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.ClaimStatusCategory", "ClaimStatusCategory")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("ClaimStatusCategory");

                    b.Navigation("ClaimType");

                    b.Navigation("EmpClaim");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpFamily", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.EmpRelation", "EmpRelation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmpRelation");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpFamilyITR", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.EmpFamily", "EmpFamily")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmpFamily");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpFamilyPAN", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.EmpFamily", "EmpFamily")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmpFamily");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.Employee", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.EmpProfile", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HealthClaim.DAL.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeReportingOfficer")
                        .WithMany()
                        .HasForeignKey("ReportingOfficerId");

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeReportingOfficer");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.HospitalAccountDetail", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.EmpAdvance", "EmpAdvance")
                        .WithMany()
                        .HasForeignKey("EmpAdvanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmpAdvance");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.OrgClaimLimit", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.UploadDocument", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.UploadTypeDetail", "UploadTypeDetail")
                        .WithMany()
                        .HasForeignKey("AdvanceUploadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");

                    b.Navigation("UploadTypeDetail");
                });

            modelBuilder.Entity("HealthClaim.DAL.Models.UploadTypeDetail", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.Employee", "EmployeeUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HealthClaim.DAL.Models.UplodDocType", "UplodDocType")
                        .WithMany()
                        .HasForeignKey("UploadTypeId")
                        .IsRequired();

                    b.Navigation("EmployeeCreatedBy");

                    b.Navigation("EmployeeUpdatedBy");

                    b.Navigation("UplodDocType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClaim.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HealthClaim.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
